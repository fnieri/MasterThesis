\begin{MintedVerbatim}[commandchars=\\\{\}]
           grammar DQGrammar;

// Lexer Rules

PROBE\PYGZus{}ID: \PYGZsq{}s\PYGZsq{};
BEHAVIOR\PYGZus{}TYPE: \PYGZsq{}f\PYGZsq{} | \PYGZsq{}a\PYGZsq{} | \PYGZsq{}p\PYGZsq{};
NUMBER: [0\PYGZhy{}9]*\PYGZsq{}.\PYGZsq{}[0\PYGZhy{}9]+ | [0\PYGZhy{}9]+;
IDENTIFIER: [a\PYGZhy{}zA\PYGZhy{}Z\PYGZus{}][a\PYGZhy{}zA\PYGZhy{}Z0\PYGZhy{}9\PYGZus{}]*;
WS: [ \PYGZbs{}t\PYGZbs{}r\PYGZbs{}n]+ \PYGZhy{}\PYGZgt{} skip;


// Parser Rules
start: definition* system? EOF;

definition: IDENTIFIER \PYGZsq{}=\PYGZsq{} component+   (\PYGZsq{}\PYGZhy{}\PYGZgt{}\PYGZsq{} component)* \PYGZsq{};\PYGZsq{};

system: \PYGZsq{}system\PYGZsq{} \PYGZsq{}=\PYGZsq{} component+ (\PYGZsq{}\PYGZhy{}\PYGZgt{}\PYGZsq{} component)*  \PYGZsq{};\PYGZsq{}?;


component
    : behaviorComponent
    | probeComponent
    | outcome
;

behaviorComponent
    : BEHAVIOR\PYGZus{}TYPE \PYGZsq{}:\PYGZsq{} IDENTIFIER (\PYGZsq{}[\PYGZsq{} probability\PYGZus{}list \PYGZsq{}]\PYGZsq{})? \PYGZsq{}(\PYGZsq{} component\PYGZus{}list \PYGZsq{})\PYGZsq{}
;

probeComponent
    : PROBE\PYGZus{}ID \PYGZsq{}:\PYGZsq{} IDENTIFIER
;


probability\PYGZus{}list: NUMBER (\PYGZsq{},\PYGZsq{} NUMBER)+;
component\PYGZus{}list: component (\PYGZsq{},\PYGZsq{} component)+;

outcome: IDENTIFIER;
\end{MintedVerbatim}
